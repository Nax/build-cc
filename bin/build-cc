#!/usr/bin/env bash
# build-cc: A cross-compiler builder

core_count=$(getconf _NPROCESSORS_ONLN)
thread_count=$(($core_count * 2))

prefix="/usr/local/cross"
stage=""
efi=false
debug=false
languages=c,c++
targets=""
host=""
shared=true
program_prefix=""
program_suffix=""

binutils_version=2.34
mpfr_version=4.0.2
gmp_version=6.2.0
mpc_version=1.1.0
isl_version=0.21
cloog_version=0.18.1
gcc_version=10.1.0
gnuefi_version=3.0.8

script="$0"
params="$@"

function download {
    curl -L "$1" -O -#
}

function die {
    echo "build-cc: fatal error"
    if $debug; then
        bash -i
    fi
    exit 1
}

# Parse options
while [ ! -z "$1" ]; do
  case "$1" in
    --efi|-E)
      efi=true ;;
    --prefix|-P)
      shift
      if [ -z "$1" ]; then
        echo "--prefix should be followed by a value"
        exit 1
      fi
      prefix="$1" ;;
    --languages|-L)
      shift
      if [ -z "$1" ]; then
        echo "--languages should be followed by a value"
        exit 1
      fi
      languages="$1" ;;
    --debug)
      debug=true ;;
    --stage)
      shift
      if [ -z "$1" ]; then
        echo "--stage should be followed by a value"
        exit 1
      fi
      stage="$1" ;;
    --host)
      shift
      if [ -z "$1" ]; then
        echo "--host should be followed by a value"
        exit 1
      fi
      host="$1" ;;
    --disable-shared)
      shared=false ;;
    --program-prefix)
      shift
      if [ -z "$1" ]; then
        echo "--program-prefix should be followed by a value"
        exit 1
      fi
      program_prefix="$1" ;;
    --program-suffix)
      shift
      if [ -z "$1" ]; then
        echo "--program-suffix should be followed by a value"
        exit 1
      fi
      program_suffix="$1" ;;
    *)
      targets="$targets $1" ;;
  esac
  shift
done

if [ -z "$targets" ]; then
  echo "usage: build-cc [--prefix prefix] [--languages languages] [--efi] [--stage dir] target [target...]"
  echo
  echo
  echo "About the options:"
  echo
  echo "--efi                     Inject PE targets into binutils, making the toolset suitable for (U)EFI development"
  echo "--program-prefix <name>   Prefix all cross-compiler programs with the given name"
  echo "--program-suffix <name>   Suffix all cross-compiler programs with the given name"
  echo "--disable-shared          Disable shared libraries"
  echo "--host <host>             Build a canadian cross using the supplied host"
  echo "--stage <dir>             Install the cross-compiler into the specified directory for staging."
  echo "--prefix <prefix>         Install the cross-compiler inside the specified directory. Defaults to /usr/local/cross"
  echo "--languages <languages>   A list of comma separated languages that the toolset will support. Defaults to c,c++"
  echo
  echo
  echo "About this script:"
  echo "    This script was created by Nax."
  echo "    This is Free Software, published under the GNU General Public License version 2 (GPLv2)"
  exit
fi

if [ -z "$stage" ]; then
  dir="$prefix"
else
  dir="$stage"
fi

# Check if root is needed to install at the required prefix.
if ! mkdir -p "$dir" >/dev/null 2>&1 || [ ! -w "$dir" ]; then
  echo "You don't have write permissions to $dir"
  exit 1
fi

if [ ! -z "$stage" ]; then
  pushd "$stage" >/dev/null 2>&1
  export DESTDIR="$PWD"
  export PATH="$PWD/$prefix/bin:$PATH"
  popd >/dev/null 2>&1
else
  export PATH="$prefix/bin:$PATH"
fi

tmproot=$(mktemp -d)
tmpbuild="$tmproot/build"
tmpbin="$tmproot/bin"
mkdir -p "$tmpbuild"
mkdir -p "$tmpbin"
export PATH="$tmpbin:$PATH"

# Workaround for BSD sed
if command -v gsed >/dev/null 2>&1; then
  echo "Found gsed, aliasing sed as gsed"
  ln -s "$(which gsed)" "$tmpbin/sed"
fi

cd "$tmpbuild"

echo "Downloading binutils"
download "https://ftp.gnu.org/gnu/binutils/binutils-$binutils_version.tar.xz"
rm -rf binutils
mkdir -p binutils
tar xf binutils-$binutils_version.tar.xz -C binutils --strip=1 || die

echo "Downloading gcc"
download "https://ftp.gnu.org/gnu/gcc/gcc-$gcc_version/gcc-$gcc_version.tar.xz"
rm -rf gcc
mkdir -p gcc
tar xf gcc-$gcc_version.tar.xz -C gcc --strip=1 || die

echo "Downloading mpfr"
download "https://ftp.gnu.org/gnu/mpfr/mpfr-$mpfr_version.tar.xz"
mkdir -p gcc/mpfr
tar xf mpfr-$mpfr_version.tar.xz -C gcc/mpfr --strip=1 || die

echo "Downloading gmp"
download "https://ftp.gnu.org/gnu/gmp/gmp-$gmp_version.tar.xz"
mkdir -p gcc/gmp
tar xf gmp-$gmp_version.tar.xz -C gcc/gmp --strip=1 || die

echo "Downloading mpc"
download "https://ftp.gnu.org/gnu/mpc/mpc-$mpc_version.tar.gz"
mkdir -p gcc/mpc
tar xf mpc-$mpc_version.tar.gz -C gcc/mpc --strip=1 || die

echo "Downloading isl"
download "http://isl.gforge.inria.fr/isl-$isl_version.tar.xz"
mkdir -p gcc/isl
tar xf isl-$isl_version.tar.xz -C gcc/isl --strip=1 || die

echo "Downloading cloog"
download "http://ftp.lip6.fr/pub/gcc/infrastructure/cloog-$cloog_version.tar.gz"
mkdir -p gcc/cloog
tar xf cloog-$cloog_version.tar.gz -C gcc/cloog --strip=1 || die

if $efi; then
    echo "Downloading gnu-efi"
    download "http://sourceforge.net/projects/gnu-efi/files/gnu-efi-$gnuefi_version.tar.bz2"
    rm -rf gnu-efi
    mkdir -p gnu-efi
    tar xf gnu-efi-$gnuefi_version.tar.bz2 -C gnu-efi --strip=1 || die
    echo "Downloading gnu-efi patch (universal elf.h)"
    download "https://gist.githubusercontent.com/Nax/3c4e4de87fa53bd3659b8ca32c27a339/raw/d9d3e45d639c6e60b0fe440865807064688f3b97/elf.h"
    cp elf.h gnu-efi/inc
fi

common_conf="--disable-win32-registry"
if ! $shared; then
  common_conf="$common_conf --disable-shared"
fi
if [ ! -z $host ]; then
  common_conf="$common_conf --host=$host"
fi
if [ ! -z $program_prefix ]; then
  common_conf="$common_conf --program-prefix=$program_prefix"
fi
if [ ! -z $program_suffix ]; then
  common_conf="$common_conf --program-suffix=$program_suffix"
fi

for target in $targets; do
  cd binutils
  binutils_conf=""
  if $efi; then
    binutils_conf="$binutils_conf --enable-targets=i386-pe,x86_64-pe"
  fi
  rm -rf build
  mkdir -p build
  cd build
  ../configure $common_conf $binutils_conf --with-sysroot --prefix="$prefix" --target="$target" --disable-nls --enable-64-bit-bfd --disable-werror || die
  make -j$thread_count all || die
  make install || die
  cd ../..

  cd gcc
  rm -rf build
  mkdir -p build
  cd build
  ../configure $common_conf --prefix="$prefix" --target="$target" --enable-languages=$languages --disable-multilib --disable-nls --without-headers || die
  make -j$thread_count all-gcc || die
  make -j$thread_count all-target-libgcc || die
  make install-gcc || die
  make install-target-libgcc || die
  cd ../..

  mkdir -p "$prefix/$target/bin"
  mkdir -p "$prefix/$target/lib"
  mkdir -p "$prefix/$target/include"

  if $efi; then
    cd gnu-efi
    make CROSS_COMPILE=${target}- PREFIX="/$target" INSTALLROOT="$prefix" || die
    make CROSS_COMPILE=${target}- PREFIX="/$target" INSTALLROOT="$prefix" install || die
    cd ..
    cp elf.h "$prefix/$target/include/"
  fi
done

cd ..

echo "Done !"
echo "Make sure to add the following to your PATH"
echo "    $prefix/bin"
